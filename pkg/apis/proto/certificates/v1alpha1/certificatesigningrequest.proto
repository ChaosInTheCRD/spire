syntax = "proto3";

package certificates.v1alpha1;

option go_package = "gitlab.com/venafi/vaas/applications/tls-protect/dmi/cli/firefly-ca/pkg/apis/proto/certificates/v1alpha1;v1alpha1";

// CertificateSigningRequest is a single certificate signing request from a
// client. A request _must_ include at least a PEM encoded X.509 certificate
// signing request that has been signed by the client's private key. A client
// may optionally request other certificate attributes that cannot be encoded
// inside a certificate signing request. These additional attributes may or
// may not be honored based on the server's configuration and authorization
// policy.
// Requests may be denied by the server following a authorization review.
message CertificateSigningRequest {
  // request contains a single PEM encoded X.509 certificate signing request,
  // which must be signed by the client's private key.
  bytes request = 1;

  // policy_name contains the name of the Policy which the client wishes to request against.
  string policy_name = 2;

  // validity_period is an optional field containing ISO8601 formatted duration the client wishes
  // the resulting X.509 certificate is signed for.
  // The specified Policy has same attribute, so the shorter duration will be used indeed.
  optional string validity_period = 3;
}

// CertificateSigningRequestResponse is the server's response to a single
// certificate signing request from a client. The message contains a single PEM
// encoded X.509 certificate chain, including the client's requested leaf
// certificate. The server will never return the root Certificate Authority
// (CA). The server may respond with a single certificate if the root CA is the
// issuer.
// The leaf certificate is always the first certificate in the chain.
// The chain will always be in order of increasing issuer authority.
message CertificateSigningRequestResponse {
  // certificate_chain is the PEM encoded X.509 certificate chain returned in
  // response to a certificate signing request.
  // certificate_chain will never contain the root CA.
  // The signed client's leaf certificate will always be first in the chain.
  // The chain will always be in order of increasing issuer authority.
  bytes certificate_chain = 1;
}
