// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.3
// source: v1alpha1/usages.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// KeyUsage is the X.509 certificate key usage.
// https://datatracker.ietf.org/doc/html/rfc2459#section-4.2.1.3
type KeyUsage int32

const (
	// KEY_USAGE_SIGNING is X.509 "signing".
	KeyUsage_KEY_USAGE_SIGNING KeyUsage = 0
	// KEY_USAGE_DIGITAL_SIGNATURE is X.509 "digital signature".
	KeyUsage_KEY_USAGE_DIGITAL_SIGNATURE KeyUsage = 1
	// KEY_USAGE_CONTENT_COMMITMENT is X.509 "content commitment".
	KeyUsage_KEY_USAGE_CONTENT_COMMITMENT KeyUsage = 2
	// KEY_USAGE_KEY_ENCIPHERMENT is X.509 "key encipherment".
	KeyUsage_KEY_USAGE_KEY_ENCIPHERMENT KeyUsage = 3
	// KEY_USAGE_KEY_AGREEMENT is X.509 "key agreement".
	KeyUsage_KEY_USAGE_KEY_AGREEMENT KeyUsage = 4
	// KEY_USAGE_DATA_ENCIPHERMENT is X.509 "data encipherment".
	KeyUsage_KEY_USAGE_DATA_ENCIPHERMENT KeyUsage = 5
	// KEY_USAGE_CRYPTOGRAM_ENCRYPTION is X.509 "cert sign".
	KeyUsage_KEY_USAGE_CERT_SIGN KeyUsage = 6
	// KEY_USAGE_CRL_SIGN is X.509 "crl sign".
	KeyUsage_KEY_USAGE_CRL_SIGN KeyUsage = 7
	// KEY_USAGE_ENCIPHER_ONLY is X.509 "encipher only".
	KeyUsage_KEY_USAGE_ENCIPHER_ONLY KeyUsage = 8
	// KEY_USAGE_DECIPHER_ONLY is X.509 "decipher only".
	KeyUsage_KEY_USAGE_DECIPHER_ONLY KeyUsage = 9
)

// Enum value maps for KeyUsage.
var (
	KeyUsage_name = map[int32]string{
		0: "KEY_USAGE_SIGNING",
		1: "KEY_USAGE_DIGITAL_SIGNATURE",
		2: "KEY_USAGE_CONTENT_COMMITMENT",
		3: "KEY_USAGE_KEY_ENCIPHERMENT",
		4: "KEY_USAGE_KEY_AGREEMENT",
		5: "KEY_USAGE_DATA_ENCIPHERMENT",
		6: "KEY_USAGE_CERT_SIGN",
		7: "KEY_USAGE_CRL_SIGN",
		8: "KEY_USAGE_ENCIPHER_ONLY",
		9: "KEY_USAGE_DECIPHER_ONLY",
	}
	KeyUsage_value = map[string]int32{
		"KEY_USAGE_SIGNING":            0,
		"KEY_USAGE_DIGITAL_SIGNATURE":  1,
		"KEY_USAGE_CONTENT_COMMITMENT": 2,
		"KEY_USAGE_KEY_ENCIPHERMENT":   3,
		"KEY_USAGE_KEY_AGREEMENT":      4,
		"KEY_USAGE_DATA_ENCIPHERMENT":  5,
		"KEY_USAGE_CERT_SIGN":          6,
		"KEY_USAGE_CRL_SIGN":           7,
		"KEY_USAGE_ENCIPHER_ONLY":      8,
		"KEY_USAGE_DECIPHER_ONLY":      9,
	}
)

func (x KeyUsage) Enum() *KeyUsage {
	p := new(KeyUsage)
	*p = x
	return p
}

func (x KeyUsage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyUsage) Descriptor() protoreflect.EnumDescriptor {
	return file_v1alpha1_usages_proto_enumTypes[0].Descriptor()
}

func (KeyUsage) Type() protoreflect.EnumType {
	return &file_v1alpha1_usages_proto_enumTypes[0]
}

func (x KeyUsage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyUsage.Descriptor instead.
func (KeyUsage) EnumDescriptor() ([]byte, []int) {
	return file_v1alpha1_usages_proto_rawDescGZIP(), []int{0}
}

// ExtendedKeyUsage is the X.509 well-known certificate extended key usage.
// https://datatracker.ietf.org/doc/html/rfc2459#section-4.2.1.13
type ExtendedKeyUsage int32

const (
	// EXTENDED_KEY_USAGE_SERVER_AUTH is X.509 "any".
	ExtendedKeyUsage_EXTENDED_KEY_USAGE_ANY ExtendedKeyUsage = 0
	// EXTENDED_KEY_USAGE_SERVER_AUTH is X.509 "server auth".
	ExtendedKeyUsage_EXTENDED_KEY_USAGE_SERVER_AUTH ExtendedKeyUsage = 1
	// EXTENDED_KEY_USAGE_CLIENT_AUTH is X.509 "client auth".
	ExtendedKeyUsage_EXTENDED_KEY_USAGE_CLIENT_AUTH ExtendedKeyUsage = 2
	// EXTENDED_KEY_USAGE_CODE_SIGNING is X.509 "code signing".jo
	ExtendedKeyUsage_EXTENDED_KEY_USAGE_CODE_SIGNING ExtendedKeyUsage = 3
	// EXTENDED_KEY_USAGE_EMAIL_PROTECTION is X.509 "email protection".
	ExtendedKeyUsage_EXTENDED_KEY_USAGE_EMAIL_PROTECTION ExtendedKeyUsage = 4
	// EXTENDED_KEY_USAGE_SMIME is X.509 "s/mime".
	ExtendedKeyUsage_EXTENDED_KEY_USAGE_SMIME ExtendedKeyUsage = 5
	// EXTENDED_KEY_USAGE_IPSECEN_SYSTEM is X.509 "ipsec end system".
	ExtendedKeyUsage_EXTENDED_KEY_USAGE_IPSEC_END_SYSTEM ExtendedKeyUsage = 6
	// EXTENDED_KEY_USAGE_IPSEC_TUNNEL is X.509 "ipsec tunnel".
	ExtendedKeyUsage_EXTENDED_KEY_USAGE_IPSEC_TUNNEL ExtendedKeyUsage = 7
	// EXTENDED_KEY_USAGE_IPSEC_USER is X.509 "ipsec user".
	ExtendedKeyUsage_EXTENDED_KEY_USAGE_IPSEC_USER ExtendedKeyUsage = 8
	// EXTENDED_KEY_USAGE_TIMESTAMPING is X.509 "timestamping".
	ExtendedKeyUsage_EXTENDED_KEY_USAGE_TIMESTAMPING ExtendedKeyUsage = 9
	// EXTENDED_KEY_USAGE_OCSP_SIGNING is X.509 "ocsp signing".
	ExtendedKeyUsage_EXTENDED_KEY_USAGE_OCSP_SIGNING ExtendedKeyUsage = 10
	// EXTENDED_KEY_USAGE_MICROSOFT_SGC is X.509 "microsoft sgc".
	ExtendedKeyUsage_EXTENDED_KEY_USAGE_MICROSOFT_SGC ExtendedKeyUsage = 11
	// EXTENDED_KEY_USAGE_NETSCAPE_SGC is X.509 "netscape sgc".
	ExtendedKeyUsage_EXTENDED_KEY_USAGE_NETSCAPE_SGC ExtendedKeyUsage = 12
)

// Enum value maps for ExtendedKeyUsage.
var (
	ExtendedKeyUsage_name = map[int32]string{
		0:  "EXTENDED_KEY_USAGE_ANY",
		1:  "EXTENDED_KEY_USAGE_SERVER_AUTH",
		2:  "EXTENDED_KEY_USAGE_CLIENT_AUTH",
		3:  "EXTENDED_KEY_USAGE_CODE_SIGNING",
		4:  "EXTENDED_KEY_USAGE_EMAIL_PROTECTION",
		5:  "EXTENDED_KEY_USAGE_SMIME",
		6:  "EXTENDED_KEY_USAGE_IPSEC_END_SYSTEM",
		7:  "EXTENDED_KEY_USAGE_IPSEC_TUNNEL",
		8:  "EXTENDED_KEY_USAGE_IPSEC_USER",
		9:  "EXTENDED_KEY_USAGE_TIMESTAMPING",
		10: "EXTENDED_KEY_USAGE_OCSP_SIGNING",
		11: "EXTENDED_KEY_USAGE_MICROSOFT_SGC",
		12: "EXTENDED_KEY_USAGE_NETSCAPE_SGC",
	}
	ExtendedKeyUsage_value = map[string]int32{
		"EXTENDED_KEY_USAGE_ANY":              0,
		"EXTENDED_KEY_USAGE_SERVER_AUTH":      1,
		"EXTENDED_KEY_USAGE_CLIENT_AUTH":      2,
		"EXTENDED_KEY_USAGE_CODE_SIGNING":     3,
		"EXTENDED_KEY_USAGE_EMAIL_PROTECTION": 4,
		"EXTENDED_KEY_USAGE_SMIME":            5,
		"EXTENDED_KEY_USAGE_IPSEC_END_SYSTEM": 6,
		"EXTENDED_KEY_USAGE_IPSEC_TUNNEL":     7,
		"EXTENDED_KEY_USAGE_IPSEC_USER":       8,
		"EXTENDED_KEY_USAGE_TIMESTAMPING":     9,
		"EXTENDED_KEY_USAGE_OCSP_SIGNING":     10,
		"EXTENDED_KEY_USAGE_MICROSOFT_SGC":    11,
		"EXTENDED_KEY_USAGE_NETSCAPE_SGC":     12,
	}
)

func (x ExtendedKeyUsage) Enum() *ExtendedKeyUsage {
	p := new(ExtendedKeyUsage)
	*p = x
	return p
}

func (x ExtendedKeyUsage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtendedKeyUsage) Descriptor() protoreflect.EnumDescriptor {
	return file_v1alpha1_usages_proto_enumTypes[1].Descriptor()
}

func (ExtendedKeyUsage) Type() protoreflect.EnumType {
	return &file_v1alpha1_usages_proto_enumTypes[1]
}

func (x ExtendedKeyUsage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtendedKeyUsage.Descriptor instead.
func (ExtendedKeyUsage) EnumDescriptor() ([]byte, []int) {
	return file_v1alpha1_usages_proto_rawDescGZIP(), []int{1}
}

var File_v1alpha1_usages_proto protoreflect.FileDescriptor

var file_v1alpha1_usages_proto_rawDesc = []byte{
	0x0a, 0x15, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2a, 0xad,
	0x02, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4b,
	0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x4e, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x47, 0x52, 0x45, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x4e, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12,
	0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x52, 0x4c, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x45, 0x4e, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10,
	0x08, 0x12, 0x1b, 0x0a, 0x17, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44,
	0x45, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x09, 0x2a, 0xe8,
	0x03, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x1e, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x44, 0x45, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23,
	0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x4d, 0x49, 0x4d,
	0x45, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f,
	0x45, 0x4e, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f,
	0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10,
	0x07, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53,
	0x54, 0x41, 0x4d, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x58, 0x54,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x4f, 0x43, 0x53, 0x50, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x24,
	0x0a, 0x20, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x55,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x4f, 0x46, 0x54, 0x5f, 0x53,
	0x47, 0x43, 0x10, 0x0b, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x53, 0x43,
	0x41, 0x50, 0x45, 0x5f, 0x53, 0x47, 0x43, 0x10, 0x0c, 0x42, 0x72, 0x5a, 0x70, 0x67, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x65, 0x6e, 0x61, 0x66, 0x69, 0x2f, 0x76,
	0x61, 0x61, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x74, 0x6c, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x2f, 0x64, 0x6d, 0x69,
	0x2f, 0x63, 0x6c, 0x69, 0x2f, 0x66, 0x69, 0x72, 0x65, 0x66, 0x6c, 0x79, 0x2d, 0x63, 0x61, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x3b, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1alpha1_usages_proto_rawDescOnce sync.Once
	file_v1alpha1_usages_proto_rawDescData = file_v1alpha1_usages_proto_rawDesc
)

func file_v1alpha1_usages_proto_rawDescGZIP() []byte {
	file_v1alpha1_usages_proto_rawDescOnce.Do(func() {
		file_v1alpha1_usages_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1alpha1_usages_proto_rawDescData)
	})
	return file_v1alpha1_usages_proto_rawDescData
}

var file_v1alpha1_usages_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_v1alpha1_usages_proto_goTypes = []interface{}{
	(KeyUsage)(0),         // 0: certificates.v1alpha1.KeyUsage
	(ExtendedKeyUsage)(0), // 1: certificates.v1alpha1.ExtendedKeyUsage
}
var file_v1alpha1_usages_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_v1alpha1_usages_proto_init() }
func file_v1alpha1_usages_proto_init() {
	if File_v1alpha1_usages_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1alpha1_usages_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1alpha1_usages_proto_goTypes,
		DependencyIndexes: file_v1alpha1_usages_proto_depIdxs,
		EnumInfos:         file_v1alpha1_usages_proto_enumTypes,
	}.Build()
	File_v1alpha1_usages_proto = out.File
	file_v1alpha1_usages_proto_rawDesc = nil
	file_v1alpha1_usages_proto_goTypes = nil
	file_v1alpha1_usages_proto_depIdxs = nil
}
