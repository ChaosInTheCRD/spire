// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: v1alpha1/v1alpha1service/certificaterequest.proto

package v1alpha1service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CertificateRequestService_Create_FullMethodName = "/certificates.service.v1alpha1.CertificateRequestService/Create"
)

// CertificateRequestServiceClient is the client API for CertificateRequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CertificateRequestServiceClient interface {
	// Create creates a new CertificateRequest against the server, returning a
	// private key and signed certificate chain.
	Create(ctx context.Context, in *CreateCertificateRequest, opts ...grpc.CallOption) (*CreateCertificateRequestResponse, error)
}

type certificateRequestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCertificateRequestServiceClient(cc grpc.ClientConnInterface) CertificateRequestServiceClient {
	return &certificateRequestServiceClient{cc}
}

func (c *certificateRequestServiceClient) Create(ctx context.Context, in *CreateCertificateRequest, opts ...grpc.CallOption) (*CreateCertificateRequestResponse, error) {
	out := new(CreateCertificateRequestResponse)
	err := c.cc.Invoke(ctx, CertificateRequestService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertificateRequestServiceServer is the server API for CertificateRequestService service.
// All implementations must embed UnimplementedCertificateRequestServiceServer
// for forward compatibility
type CertificateRequestServiceServer interface {
	// Create creates a new CertificateRequest against the server, returning a
	// private key and signed certificate chain.
	Create(context.Context, *CreateCertificateRequest) (*CreateCertificateRequestResponse, error)
	mustEmbedUnimplementedCertificateRequestServiceServer()
}

// UnimplementedCertificateRequestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCertificateRequestServiceServer struct {
}

func (UnimplementedCertificateRequestServiceServer) Create(context.Context, *CreateCertificateRequest) (*CreateCertificateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCertificateRequestServiceServer) mustEmbedUnimplementedCertificateRequestServiceServer() {
}

// UnsafeCertificateRequestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CertificateRequestServiceServer will
// result in compilation errors.
type UnsafeCertificateRequestServiceServer interface {
	mustEmbedUnimplementedCertificateRequestServiceServer()
}

func RegisterCertificateRequestServiceServer(s grpc.ServiceRegistrar, srv CertificateRequestServiceServer) {
	s.RegisterService(&CertificateRequestService_ServiceDesc, srv)
}

func _CertificateRequestService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateRequestServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CertificateRequestService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateRequestServiceServer).Create(ctx, req.(*CreateCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CertificateRequestService_ServiceDesc is the grpc.ServiceDesc for CertificateRequestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CertificateRequestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "certificates.service.v1alpha1.CertificateRequestService",
	HandlerType: (*CertificateRequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CertificateRequestService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1alpha1/v1alpha1service/certificaterequest.proto",
}
