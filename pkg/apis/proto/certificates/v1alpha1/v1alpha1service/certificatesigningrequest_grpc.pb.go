// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: v1alpha1/v1alpha1service/certificatesigningrequest.proto

package v1alpha1service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CertificateSigningRequestService_Create_FullMethodName = "/certificates.service.v1alpha1.CertificateSigningRequestService/Create"
)

// CertificateSigningRequestServiceClient is the client API for CertificateSigningRequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CertificateSigningRequestServiceClient interface {
	// Create creates a new CertificateSigningRequest against the server,
	// returning a signed certificate chain.
	Create(ctx context.Context, in *CreateCertificateSigningRequest, opts ...grpc.CallOption) (*CreateCertificateSigningRequestResponse, error)
}

type certificateSigningRequestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCertificateSigningRequestServiceClient(cc grpc.ClientConnInterface) CertificateSigningRequestServiceClient {
	return &certificateSigningRequestServiceClient{cc}
}

func (c *certificateSigningRequestServiceClient) Create(ctx context.Context, in *CreateCertificateSigningRequest, opts ...grpc.CallOption) (*CreateCertificateSigningRequestResponse, error) {
	out := new(CreateCertificateSigningRequestResponse)
	err := c.cc.Invoke(ctx, CertificateSigningRequestService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertificateSigningRequestServiceServer is the server API for CertificateSigningRequestService service.
// All implementations must embed UnimplementedCertificateSigningRequestServiceServer
// for forward compatibility
type CertificateSigningRequestServiceServer interface {
	// Create creates a new CertificateSigningRequest against the server,
	// returning a signed certificate chain.
	Create(context.Context, *CreateCertificateSigningRequest) (*CreateCertificateSigningRequestResponse, error)
	mustEmbedUnimplementedCertificateSigningRequestServiceServer()
}

// UnimplementedCertificateSigningRequestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCertificateSigningRequestServiceServer struct {
}

func (UnimplementedCertificateSigningRequestServiceServer) Create(context.Context, *CreateCertificateSigningRequest) (*CreateCertificateSigningRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCertificateSigningRequestServiceServer) mustEmbedUnimplementedCertificateSigningRequestServiceServer() {
}

// UnsafeCertificateSigningRequestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CertificateSigningRequestServiceServer will
// result in compilation errors.
type UnsafeCertificateSigningRequestServiceServer interface {
	mustEmbedUnimplementedCertificateSigningRequestServiceServer()
}

func RegisterCertificateSigningRequestServiceServer(s grpc.ServiceRegistrar, srv CertificateSigningRequestServiceServer) {
	s.RegisterService(&CertificateSigningRequestService_ServiceDesc, srv)
}

func _CertificateSigningRequestService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCertificateSigningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateSigningRequestServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CertificateSigningRequestService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateSigningRequestServiceServer).Create(ctx, req.(*CreateCertificateSigningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CertificateSigningRequestService_ServiceDesc is the grpc.ServiceDesc for CertificateSigningRequestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CertificateSigningRequestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "certificates.service.v1alpha1.CertificateSigningRequestService",
	HandlerType: (*CertificateSigningRequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CertificateSigningRequestService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1alpha1/v1alpha1service/certificatesigningrequest.proto",
}
